// <auto-generated />
using System;
using MalamuleleHealth.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MalamuleleHealth.EFCore.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230912105102_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataInterface.Domain.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = new Guid("a896f84a-1ed1-44ac-8e39-cf702cb29123"),
                            AppointmentDate = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            AppointmentTime = new DateTime(2023, 9, 12, 12, 51, 2, 428, DateTimeKind.Local).AddTicks(5139),
                            Purpose = "Regular checkup",
                            Status = "Scheduled"
                        },
                        new
                        {
                            AppointmentId = new Guid("56b55b08-1d99-40c3-a6d7-30b1343a27b0"),
                            AppointmentDate = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            AppointmentTime = new DateTime(2023, 9, 12, 12, 51, 2, 428, DateTimeKind.Local).AddTicks(5142),
                            Purpose = "Follow-up",
                            Status = "Scheduled"
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Bed", b =>
                {
                    b.Property<Guid>("BedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BedId");

                    b.HasIndex("WardId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            BedId = new Guid("920dfba6-e527-43a4-800e-a1436add7ff1"),
                            Availability = true,
                            Number = 101,
                            WardId = new Guid("01d2950a-d07e-4342-8c05-eae2a9e802c6")
                        },
                        new
                        {
                            BedId = new Guid("6ba62bd3-ab14-4bdd-94b9-6bb91b14b6c0"),
                            Availability = false,
                            Number = 102,
                            WardId = new Guid("25204199-e961-4eb6-b2e9-781eb9054d14")
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("6f93cd11-ea0a-4233-837b-d84ed61b0b1a"),
                            Description = "Heart-related issues",
                            Name = "Cardiology"
                        },
                        new
                        {
                            DepartmentId = new Guid("d9421643-354c-4c92-8e8a-0cceb9f58424"),
                            Description = "Musculoskeletal disorders",
                            Name = "Orthopedics"
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = new Guid("781cd3e2-e4e9-40c3-a6ea-2f31df6996a1"),
                            DueDate = new DateTime(2023, 10, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Pending",
                            TotalAmount = 250.5f
                        },
                        new
                        {
                            InvoiceId = new Guid("182ce1f4-0a6b-47c5-9978-039d77b27da6"),
                            DueDate = new DateTime(2023, 9, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Paid",
                            TotalAmount = 150.25f
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.MedicalHistory", b =>
                {
                    b.Property<Guid>("MedicalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalHistoryId");

                    b.ToTable("MedicalHistories");

                    b.HasData(
                        new
                        {
                            MedicalHistoryId = new Guid("e52b9e22-4e02-4a94-adf2-1f35a0c389d9"),
                            DiagnosisDate = new DateTime(2023, 3, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            MedicalCondition = "Hypertension",
                            Treatment = "Medication and lifestyle changes"
                        },
                        new
                        {
                            MedicalHistoryId = new Guid("c636ff57-7816-4c8d-a56c-47a6d872487e"),
                            DiagnosisDate = new DateTime(2022, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            MedicalCondition = "Diabetes",
                            Treatment = "Insulin therapy"
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.MedicalTest", b =>
                {
                    b.Property<Guid>("MedicalTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalTestId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("MedicalTests");

                    b.HasData(
                        new
                        {
                            MedicalTestId = new Guid("5d3c266d-1d2c-4fda-b81e-8ed37bbeeb5a"),
                            Cost = 45f,
                            DepartmentId = new Guid("6f93cd11-ea0a-4233-837b-d84ed61b0b1a"),
                            TestName = "Blood Pressure"
                        },
                        new
                        {
                            MedicalTestId = new Guid("e131a124-e1ed-4c3a-8439-e6424333f731"),
                            Cost = 120.5f,
                            DepartmentId = new Guid("d9421643-354c-4c92-8e8a-0cceb9f58424"),
                            TestName = "X-Ray"
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = new Guid("921441db-06e1-486f-876e-ab82cb1ca6b4"),
                            AppointmentDate = new DateTime(2023, 9, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            AppointmentTime = new DateTime(2023, 9, 12, 12, 51, 2, 428, DateTimeKind.Local).AddTicks(5455),
                            Purpose = "Appointment Reminder",
                            Status = "Sent"
                        },
                        new
                        {
                            MessageId = new Guid("aec6b6f9-ab5d-44b4-9a6f-776a935b9a79"),
                            AppointmentDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            AppointmentTime = new DateTime(2023, 9, 12, 12, 51, 2, 428, DateTimeKind.Local).AddTicks(5459),
                            Purpose = "Appointment Confirmation",
                            Status = "Sent"
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = new Guid("08e352e2-281d-4123-8d33-1ab9db276722"),
                            Amount = 75f,
                            PaymentDate = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            PaymentId = new Guid("ad12dcef-8a24-4c6e-83ff-42f2831b8fb4"),
                            Amount = 100.25f,
                            PaymentDate = new DateTime(2023, 8, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Prescription", b =>
                {
                    b.Property<Guid>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            PrescriptionId = new Guid("2b017b05-3bdd-41e2-abc1-d8eaea33de7f"),
                            AppointmentId = new Guid("a896f84a-1ed1-44ac-8e39-cf702cb29123"),
                            Instructions = "Take one tablet daily",
                            Medication = "Aspirin",
                            PrescriptionDate = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            PrescriptionId = new Guid("25d32200-8651-4db7-b3ad-c78070829269"),
                            AppointmentId = new Guid("56b55b08-1d99-40c3-a6d7-30b1343a27b0"),
                            Instructions = "Take as needed for pain",
                            Medication = "Ibuprofen",
                            PrescriptionDate = new DateTime(2023, 9, 7, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.TestResult", b =>
                {
                    b.Property<Guid>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalTestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResultDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TestResultId");

                    b.HasIndex("MedicalTestId");

                    b.ToTable("TestResults");

                    b.HasData(
                        new
                        {
                            TestResultId = new Guid("b227f9e6-e99f-4039-ae60-bcd41f0758a3"),
                            MedicalTestId = new Guid("5d3c266d-1d2c-4fda-b81e-8ed37bbeeb5a"),
                            ResultDetails = "Normal blood pressure reading",
                            TestDate = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            TestResultId = new Guid("6331e6ce-d6c2-471b-b06d-403419f790e9"),
                            MedicalTestId = new Guid("e131a124-e1ed-4c3a-8439-e6424333f731"),
                            ResultDetails = "No fractures detected",
                            TestDate = new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Ward", b =>
                {
                    b.Property<Guid>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            WardId = new Guid("01d2950a-d07e-4342-8c05-eae2a9e802c6"),
                            Name = "General Ward"
                        },
                        new
                        {
                            WardId = new Guid("25204199-e961-4eb6-b2e9-781eb9054d14"),
                            Name = "Pediatrics Ward"
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Bed", b =>
                {
                    b.HasOne("DataInterface.Domain.Ward", "Wards")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("DataInterface.Domain.MedicalTest", b =>
                {
                    b.HasOne("DataInterface.Domain.Department", "Departments")
                        .WithMany("MedicalTests")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("DataInterface.Domain.Prescription", b =>
                {
                    b.HasOne("DataInterface.Domain.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("DataInterface.Domain.TestResult", b =>
                {
                    b.HasOne("DataInterface.Domain.MedicalTest", "MedicalTests")
                        .WithMany("TestResults")
                        .HasForeignKey("MedicalTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalTests");
                });

            modelBuilder.Entity("DataInterface.Domain.Ward", b =>
                {
                    b.HasOne("DataInterface.Domain.Department", null)
                        .WithMany("Wards")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("DataInterface.Domain.Department", b =>
                {
                    b.Navigation("MedicalTests");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("DataInterface.Domain.MedicalTest", b =>
                {
                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
