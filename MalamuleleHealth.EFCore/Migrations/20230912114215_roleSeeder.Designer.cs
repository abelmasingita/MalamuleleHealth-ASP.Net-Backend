// <auto-generated />
using System;
using MalamuleleHealth.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MalamuleleHealth.EFCore.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230912114215_roleSeeder")]
    partial class roleSeeder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataInterface.Domain.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = new Guid("4f644f42-bfdc-410c-9b6a-52c37a4866d8"),
                            AppointmentDate = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            AppointmentTime = new DateTime(2023, 9, 12, 13, 42, 15, 12, DateTimeKind.Local).AddTicks(2384),
                            Purpose = "Regular checkup",
                            Status = "Scheduled"
                        },
                        new
                        {
                            AppointmentId = new Guid("d3d0186e-0d4d-4d88-b379-b2c2173ed217"),
                            AppointmentDate = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            AppointmentTime = new DateTime(2023, 9, 12, 13, 42, 15, 12, DateTimeKind.Local).AddTicks(2386),
                            Purpose = "Follow-up",
                            Status = "Scheduled"
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Bed", b =>
                {
                    b.Property<Guid>("BedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BedId");

                    b.HasIndex("WardId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            BedId = new Guid("ba2922a3-31ed-4516-ab13-6bf2527ae342"),
                            Availability = true,
                            Number = 101,
                            WardId = new Guid("29bcf8e5-e9d3-4449-9d93-cd37d9b653e4")
                        },
                        new
                        {
                            BedId = new Guid("4fc8947a-09f4-441a-91f0-f6a42cb079b4"),
                            Availability = false,
                            Number = 102,
                            WardId = new Guid("8a254245-38e9-43c8-ab3b-2124d6e2d8ad")
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("3ed8177e-a277-434f-9fe3-dc831ee38840"),
                            Description = "Heart-related issues",
                            Name = "Cardiology"
                        },
                        new
                        {
                            DepartmentId = new Guid("bbe82890-ed9d-4472-a1c7-00bbf3290f54"),
                            Description = "Musculoskeletal disorders",
                            Name = "Orthopedics"
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = new Guid("3acf8ea9-e299-4c20-adf9-c60512b627f1"),
                            DueDate = new DateTime(2023, 10, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Pending",
                            TotalAmount = 250.5f
                        },
                        new
                        {
                            InvoiceId = new Guid("15c49e84-194f-423d-b49b-258d340cfbb2"),
                            DueDate = new DateTime(2023, 9, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "Paid",
                            TotalAmount = 150.25f
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.MedicalHistory", b =>
                {
                    b.Property<Guid>("MedicalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalHistoryId");

                    b.ToTable("MedicalHistories");

                    b.HasData(
                        new
                        {
                            MedicalHistoryId = new Guid("8ccef679-2b4a-4f4f-a56b-bfbbaf6561e4"),
                            DiagnosisDate = new DateTime(2023, 3, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            MedicalCondition = "Hypertension",
                            Treatment = "Medication and lifestyle changes"
                        },
                        new
                        {
                            MedicalHistoryId = new Guid("74b65123-534f-4ef8-92e5-2b3707169b10"),
                            DiagnosisDate = new DateTime(2022, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            MedicalCondition = "Diabetes",
                            Treatment = "Insulin therapy"
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.MedicalTest", b =>
                {
                    b.Property<Guid>("MedicalTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalTestId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("MedicalTests");

                    b.HasData(
                        new
                        {
                            MedicalTestId = new Guid("31f37125-2889-4834-bbb3-ce99c45b20a4"),
                            Cost = 45f,
                            DepartmentId = new Guid("3ed8177e-a277-434f-9fe3-dc831ee38840"),
                            TestName = "Blood Pressure"
                        },
                        new
                        {
                            MedicalTestId = new Guid("67ef5efa-2e83-47ae-96d1-0d05b1250b6c"),
                            Cost = 120.5f,
                            DepartmentId = new Guid("bbe82890-ed9d-4472-a1c7-00bbf3290f54"),
                            TestName = "X-Ray"
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = new Guid("52fd11c3-d83d-46b7-a135-3f8df4ef0973"),
                            AppointmentDate = new DateTime(2023, 9, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            AppointmentTime = new DateTime(2023, 9, 12, 13, 42, 15, 12, DateTimeKind.Local).AddTicks(2558),
                            Purpose = "Appointment Reminder",
                            Status = "Sent"
                        },
                        new
                        {
                            MessageId = new Guid("a1d78578-f173-4325-8a00-2da289a01691"),
                            AppointmentDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            AppointmentTime = new DateTime(2023, 9, 12, 13, 42, 15, 12, DateTimeKind.Local).AddTicks(2561),
                            Purpose = "Appointment Confirmation",
                            Status = "Sent"
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = new Guid("1f849fef-5dea-441c-89dd-0776b0a9820e"),
                            Amount = 75f,
                            PaymentDate = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            PaymentId = new Guid("f4c2d548-043c-4edd-87e7-4cce14959c87"),
                            Amount = 100.25f,
                            PaymentDate = new DateTime(2023, 8, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Prescription", b =>
                {
                    b.Property<Guid>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            PrescriptionId = new Guid("ef48bb34-ed89-410f-820d-f771f63acfa8"),
                            AppointmentId = new Guid("4f644f42-bfdc-410c-9b6a-52c37a4866d8"),
                            Instructions = "Take one tablet daily",
                            Medication = "Aspirin",
                            PrescriptionDate = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            PrescriptionId = new Guid("a8b8af17-2338-4bea-9815-2861d02858f7"),
                            AppointmentId = new Guid("d3d0186e-0d4d-4d88-b379-b2c2173ed217"),
                            Instructions = "Take as needed for pain",
                            Medication = "Ibuprofen",
                            PrescriptionDate = new DateTime(2023, 9, 7, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.TestResult", b =>
                {
                    b.Property<Guid>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalTestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResultDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TestResultId");

                    b.HasIndex("MedicalTestId");

                    b.ToTable("TestResults");

                    b.HasData(
                        new
                        {
                            TestResultId = new Guid("b6aaf5c0-83d8-4dbd-853e-9d704bd6d12e"),
                            MedicalTestId = new Guid("31f37125-2889-4834-bbb3-ce99c45b20a4"),
                            ResultDetails = "Normal blood pressure reading",
                            TestDate = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            TestResultId = new Guid("b7d57c20-3d49-4d0a-b7cd-6b5dd234b53c"),
                            MedicalTestId = new Guid("67ef5efa-2e83-47ae-96d1-0d05b1250b6c"),
                            ResultDetails = "No fractures detected",
                            TestDate = new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("DataInterface.Domain.Ward", b =>
                {
                    b.Property<Guid>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            WardId = new Guid("29bcf8e5-e9d3-4449-9d93-cd37d9b653e4"),
                            Name = "General Ward"
                        },
                        new
                        {
                            WardId = new Guid("8a254245-38e9-43c8-ab3b-2124d6e2d8ad"),
                            Name = "Pediatrics Ward"
                        });
                });

            modelBuilder.Entity("MalamuleleHealth.EFCore.Application.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fe6a2b11-c7d0-4587-b9ab-ca05dc2f460b",
                            ConcurrencyStamp = "fa1af129-6b03-4fe7-a6b3-66b97473ff5a",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "4e36a6c4-9d4d-4b62-b60c-67b66f95c149",
                            ConcurrencyStamp = "3e6ecfc8-a556-4245-87bf-f0a74818d7fb",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataInterface.Domain.Bed", b =>
                {
                    b.HasOne("DataInterface.Domain.Ward", "Wards")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("DataInterface.Domain.MedicalTest", b =>
                {
                    b.HasOne("DataInterface.Domain.Department", "Departments")
                        .WithMany("MedicalTests")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("DataInterface.Domain.Prescription", b =>
                {
                    b.HasOne("DataInterface.Domain.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("DataInterface.Domain.TestResult", b =>
                {
                    b.HasOne("DataInterface.Domain.MedicalTest", "MedicalTests")
                        .WithMany("TestResults")
                        .HasForeignKey("MedicalTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalTests");
                });

            modelBuilder.Entity("DataInterface.Domain.Ward", b =>
                {
                    b.HasOne("DataInterface.Domain.Department", null)
                        .WithMany("Wards")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MalamuleleHealth.EFCore.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MalamuleleHealth.EFCore.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MalamuleleHealth.EFCore.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MalamuleleHealth.EFCore.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataInterface.Domain.Department", b =>
                {
                    b.Navigation("MedicalTests");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("DataInterface.Domain.MedicalTest", b =>
                {
                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
